{"version":3,"file":"color.js","sourceRoot":"","sources":["../../src/core/color.ts"],"names":[],"mappings":"AAAA,MAAM,GAAG;IACC,GAAG,CAAS;IACZ,UAAU,CAAS;IACnB,SAAS,CAAS;IAE1B,YAAY,GAAW,EAAE,UAAkB,EAAE,SAAiB;QAC5D,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC;IAEM,iBAAiB,CAAC,KAAa;QACpC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACtB,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;QAChD,OAAO,GAAG,CAAC;IACb,CAAC;IAEM,OAAO,CAAC,KAAa;QAC1B,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;QACxE,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QAClC,MAAM,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEvD,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAExB,QAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;YAC9B,KAAK,CAAC;gBAAG,CAAC,GAAG,MAAM,CAAC;gBAAC,CAAC,GAAG,CAAC,CAAC;gBAAC,MAAM;YAClC,KAAK,CAAC;gBAAG,CAAC,GAAG,MAAM,CAAC;gBAAC,CAAC,GAAG,CAAC,CAAC;gBAAC,MAAM;YAClC,KAAK,CAAC;gBAAG,CAAC,GAAG,MAAM,CAAC;gBAAC,CAAC,GAAG,CAAC,CAAC;gBAAC,MAAM;YAClC,KAAK,CAAC;gBAAG,CAAC,GAAG,MAAM,CAAC;gBAAC,CAAC,GAAG,CAAC,CAAC;gBAAC,MAAM;YAClC,KAAK,CAAC;gBAAG,CAAC,GAAG,MAAM,CAAC;gBAAC,CAAC,GAAG,CAAC,CAAC;gBAAC,MAAM;YAClC;gBAAS,CAAC,GAAG,MAAM,CAAC;gBAAC,CAAC,GAAG,CAAC,CAAC;gBAAC,MAAM;SACnC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,GAAG,MAAM,GAAG,CAAC,CAAC;QAC/C,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;QACvC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;QACvC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;QAEvC,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,GAAG,CAAA;IAC3C,CAAC;CACF;AAED,OAAO,EAAE,GAAG,EAAE,CAAA","sourcesContent":["class HSL {\n  private hue: number;\n  private saturation: number;\n  private lightness: number;\n\n  constructor(hue: number, saturation: number, lightness: number) {\n    this.hue = hue;\n    this.saturation = saturation;\n    this.lightness = lightness;\n  }\n\n  public copy(): HSL {\n    return new HSL(this.hue, this.saturation, this.lightness);\n  }\n\n  public adjust_luminosity(delta: number): HSL {\n    let hsl = this.copy();\n    hsl.lightness = Math.max(0, Math.min(1, delta));\n    return hsl;\n  }\n\n  public to_rgba(alpha: number): string {\n    const chroma = (1 - Math.abs(2 * this.lightness - 1)) * this.saturation;\n    const hue_segment = this.hue / 60;\n    const x = chroma * (1 - Math.abs(hue_segment % 2 - 1));\n\n    let r = 0, g = 0, b = 0;\n\n    switch(Math.floor(hue_segment)) {\n      case 0:  r = chroma; g = x; break;\n      case 1:  g = chroma; r = x; break;\n      case 2:  g = chroma; b = x; break;\n      case 3:  b = chroma; g = x; break;\n      case 4:  b = chroma; r = x; break;\n      default: r = chroma; b = x; break;\n    }\n\n    const adjustment = this.lightness - chroma / 2;\n    r = Math.round((r + adjustment) * 255);\n    g = Math.round((g + adjustment) * 255);\n    b = Math.round((b + adjustment) * 255);\n\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`\n  }\n}\n\nexport { HSL }\n"]}